/*Дано число D и указатель P1 на вершину непустого стека. 
Добавить элемент со значением D в стек и вывести адрес P2 новой вершины стека.

Для каждой динамической структуры должен быть предусмотрен стандартный набор методов - 
добавления/удаления/вывода элементов. 
Во всех задачах обязательно наличие дружественного интерфейса. Ввод данных с клавиатуры.

В заданиях подгруппы структура «стек» (stack) моделируется цепочкой связанных
узлов-записей типа TNode. Поле Next последнего элемента цепочки равно nullptr. Вершиной
стека (top) считается первый элемент цепочки. Для доступа к стеку используется указатель на
его вершину (для пустого стека данный указатель полагается равным nullptr). Значением
элемента стека считается значение его поля Data*/


#ifndef STACK_H
#define STACK_H

#include <iostream>
#include <string>

using namespace std;

// Узел стека
class TNode {
public:
    int data;     // Данные узла
    TNode* next;  // Указатель на следующий узел

    // Конструктор узла
    TNode(int value);
};

// Класс стека
class Stack {
private:
    TNode* top;  // Указатель на вершину стека

public:
    // Конструктор и деструктор
    Stack();
    ~Stack();

    // Проверка на пустоту стека
    bool isEmpty() const;

    // Добавление элемента в стек
    void push(int value);

    // Удаление элемента из стека
    bool pop();

    // Просмотр вершины стека
    bool peek(int& value) const;

    // Получение строкового представления стека
    string toString() const;

    // Очистка стека
    void clearStack();

    // Получение указателя на вершину стека
    TNode* getTop() const;

    // Дружественная функция для добавления элемента и вывода адреса
    friend void addElementAndPrintAddress(Stack& stack, int D);
};

// Функция для добавления элемента и вывода адреса новой вершины
void addElementAndPrintAddress(Stack& stack, int D);

#endif // STACK_H
